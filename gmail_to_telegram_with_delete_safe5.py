# gmail_to_telegram_with_delete_safe5.py
import os
import imaplib
import email
import logging
from email.header import decode_header
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
import asyncio

load_dotenv()

EMAIL_ACCOUNT = os.getenv("EMAIL_ACCOUNT")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
IMAP_SERVER = os.getenv("IMAP_SERVER", "imap.gmail.com")
IMAP_PORT = int(os.getenv("IMAP_PORT", "993"))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

seen_uids = set()
bot = Bot(token=TELEGRAM_TOKEN)

async def send_email(uid, from_, subject, date):
    msg = f"üì® –û—Ç: {from_}\nüìå –¢–µ–º–∞: {subject}\nüìÖ –î–∞—Ç–∞: {date}"
    button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{uid}")]
    ])
    await bot.send_message(chat_id=CHAT_ID, text=msg, reply_markup=button)

async def check_mail():
    try:
        with imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT) as imap:
            imap.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
            logging.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π IMAP –ª–æ–≥–∏–Ω")
            imap.select("inbox")
            result, data = imap.search(None, "ALL")
            logging.info(f"üîç –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º: {result}")
            if result != "OK":
                return

            for num in data[0].split():
                if num in seen_uids:
                    continue
                seen_uids.add(num)
                res, msg_data = imap.fetch(num, "(RFC822)")
                if res != "OK":
                    continue
                msg = email.message_from_bytes(msg_data[0][1])
                from_ = decode_header(msg["From"])[0][0]
                subject = decode_header(msg["Subject"])[0][0]
                date = msg["Date"]
                if isinstance(from_, bytes):
                    from_ = from_.decode(errors="ignore")
                if isinstance(subject, bytes):
                    subject = subject.decode(errors="ignore")
                logging.info(f"üì• –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ UID={num.decode()}: {subject}")
                logging.info(f"üì§ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ Telegram: UID={num.decode()}, From={from_}, Subject={subject}")
                await send_email(num.decode(), from_, subject, date)
    except Exception as e:
        logging.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data.startswith("delete_"):
        uid = query.data.split("_")[1]
        with imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT) as imap:
            imap.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
            logging.info("üì© –£–¥–∞–ª–µ–Ω–∏–µ: –ª–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω")
            imap.select("inbox")
            logging.info("üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ inbox")
            result = imap.uid("STORE", uid, "+FLAGS", r"(\Deleted)")
            logging.info(f"üóë STORE UID={uid} —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result[0]}")
            imap.expunge()
            logging.info(f"‚úÖ Expunge –¥–ª—è UID={uid} –≤—ã–ø–æ–ª–Ω–µ–Ω")
        await query.edit_message_text("‚úÖ –ü–∏—Å—å–º–æ —É–¥–∞–ª–µ–Ω–æ.")

async def run():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CallbackQueryHandler(handle_callback))
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_mail, "interval", minutes=1)
    scheduler.start()
    logging.info("üì≤ Application started")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    import asyncio
    asyncio.get_event_loop().run_until_complete(run())
