import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "700068819:AAEr1GR968-AeKjlysUTLlyWPCke6mbdRfY"
ALLOWED_USERS = {501851181, 477080226}  # ID —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏

PRODUCT_CATEGORIES = {
    "–û–≤–æ—á—ñ": ["–û–≥—ñ—Ä–∫–∏", "–ü–æ–º—ñ–¥–æ—Ä–∏", "–ö–∞—Ä—Ç–æ–ø–ª—è", "–¶–∏–±—É–ª—è", "–ß–∞—Å–Ω–∏–∫", "–ú–æ—Ä–∫–≤–∞", "–ö–∞–ø—É—Å—Ç–∞", "–ü–µ—Ä–µ—Ü—å", "–ë—É—Ä—è–∫", "–ë–∞–∫–ª–∞–∂–∞–Ω–∏", "–ö–∞–±–∞—á–∫–∏", "–ì—Ä–∏–±–∏"],
    "–ó–µ–ª–µ–Ω—å": ["–¶–∏–±—É–ª—å–∫–∞", "–ü–µ—Ç—Ä—É—à–∫–∞", "–ö—Ä—ñ–ø", "–©–∞–≤–µ–ª—å", "–†–µ–¥–∏—Å–∫–∞", "–°–∞–ª–∞—Ç"],
    "–§—Ä—É–∫—Ç–∏": ["–õ–∏–º–æ–Ω", "–Ø–±–ª—É–∫–∞", "–ì—Ä—É—à—ñ", "–í–∏–Ω–æ–≥—Ä–∞–¥", "–°–ª–∏–≤–∞"],
    "–ú–æ–ª–æ—á–Ω—ñ —Ç–∞ —è–π—Ü—è": ["–Ø–π—Ü—è", "–°–∏—Ä", "–¢–≤–æ—Ä–æ–≥", "–ú–æ–ª–æ–∫–æ", "–°–º–µ—Ç–∞–Ω–∞", "–ú–∞—Å–ª–æ","–ì–µ—Ä–∞–ª–∞–∫—Ç", "–í–µ—Ä—à–∫–∏"],
    "–ë–∞–∫–∞–ª—ñ—è": ["–ú–∞–∫–∞—Ä–æ–Ω–∏", "–ö—Ä—É–ø–∏", "–ë–æ—Ä–æ—à–Ω–æ", "–¶—É–∫–æ—Ä", "–°—ñ–ª—å"],
    "–°–æ–ª—ñ–Ω–Ω—è": ["–ö–∞–ø—É—Å—Ç–∞ –∫–≤.", "–ú–æ—Ä–∫–≤–∏—á–∫–∞", "–û–≥—ñ—Ä–æ–∫", "–ü–æ–º—ñ–¥–æ—Ä"],
    "–†–∏–±–∞": ["–°–≤—ñ–∂–∞ —Ä–∏–±–∞", "–°—å–æ–º–≥–∞", "–§–æ—Ä–µ–ª—å", "–û—Å–µ–ª–µ–¥–µ—Ü—å", "–Ü–∫—Ä–∞"],
    "–•–ª—ñ–±–Ω—ñ –≤–∏—Ä–æ–±–∏": ["–•–ª—ñ–±", "–õ–∞–≤–∞—à", "–ë–∞–≥–µ—Ç", "–ß—ñ–∞–±–∞—Ç–∞", "–ö—Ä—É–∞—Å–∞–Ω–∏, —Å–ª–æ–π–∫–∏"],
    "–ß–∞–π, –∫–∞–≤–∞": ["–ß–∞–π", "–ö–∞–≤–∞"],
    "–ö–æ–≤–±–∞—Å–Ω—ñ": ["–í–∞—Ä–µ–Ω–∞", "–ö–æ–ø—á–µ–Ω–∞", "–°–æ—Å–∏—Å–∫–∏"],
    "–ú'—è—Å–æ": ["–°–≤–∏–Ω–∏–Ω–∞", "–ö—É—Ä—è—Ç–∏–Ω–∞", "–Ø–ª–æ–≤–∏—á–∏–Ω–∞", "–Ü–Ω–¥–∏—á–∞—Ç–∏–Ω–∞", "–°–∞–ª–æ"],
    "–°–æ—É—Å–∏, –ø—Ä–∏–ø—Ä–∞–≤–∏": ["–û–ª—ñ—è —Ä–æ—Å–ª–∏–Ω–Ω–∞", "–û—Ü–µ—Ç", "–û–ª–∏–≤–∫–∏", "–ú–∞—Å–ª–∏–Ω–∏", "–ú–∞–π–æ–Ω–µ–∑", "–°–æ–µ–≤. —Å–æ—É—Å", "–°–æ—É—Å–∏", "–ü—Ä–∏–ø—Ä–∞–≤–∏ —Ç–∞ —Å–ø–µ—Ü—ñ—ó"],
    "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ü—ñ—è": ["–í–∞—Ä–µ–Ω–Ω—è —Ç–∞ –¥–∂–µ–º–∏", "–ö–æ–Ω—Å–µ—Ä–≤–æ–≤–∞–Ω—ñ —Ñ—Ä—É–∫—Ç–∏", "–ö–æ–Ω—Å–µ—Ä–≤–æ–≤–∞–Ω—ñ –≥—Ä–∏–±–∏", "–ö–æ–Ω—Å–µ—Ä–≤–æ–≤–∞–Ω–∞ —Ä–∏–±–∞", "–ö–æ–Ω—Å–µ—Ä–≤–æ–≤–∞–Ω–µ –º‚Äô—è—Å–æ", "–ö–æ–Ω—Å–µ—Ä–≤–æ–≤–∞–Ω—ñ –æ–≤–æ—á—ñ", "–ü–∞—à—Ç–µ—Ç"],
    "–ó–∞–º–æ—Ä–æ–∂–µ–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏": ["–¢—ñ—Å—Ç–æ", "–ú–æ—Ä–æ–∑–∏–≤–æ", "–ü–µ–ª—å–º–µ–Ω—ñ", "–í–∞—Ä–µ–Ω–∏–∫–∏", "–ú–ª–∏–Ω—Ü—ñ"]
 }

selected_products = {}


def is_authorized(user_id):
    return user_id in ALLOWED_USERS


async def show_categories(update: Update, context: CallbackContext):
    categories = list(PRODUCT_CATEGORIES.keys())
    keyboard = [
        [InlineKeyboardButton(categories[i], callback_data=f"category_{categories[i]}"),
         InlineKeyboardButton(categories[i + 1], callback_data=f"category_{categories[i + 1]}")]
        for i in range(0, len(categories) - 1, 2)
    ]
    if len(categories) % 2 == 1:
        keyboard.append([InlineKeyboardButton(categories[-1], callback_data=f"category_{categories[-1]}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text("üõç –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("üõç –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)


async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    selected_products[user_id] = set()
    await show_categories(update, context)


async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = update.effective_user.id
    await query.answer()

    if not is_authorized(user_id):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    data = query.data

    if data.startswith("category_"):
        category = data.split("_", 1)[1]
        await show_products(update, user_id, category, query)

    elif data.startswith("select_"):
        product = data.split("_", 1)[1]

        if user_id not in selected_products:
            selected_products[user_id] = set()

        if product in selected_products[user_id]:
            selected_products[user_id].remove(product)
        else:
            selected_products[user_id].add(product)

        category = next((cat for cat, items in PRODUCT_CATEGORIES.items() if product in items), None)
        if category:
            await show_products(update, user_id, category, query)

    elif data == "back_to_categories":
        await show_categories(update, context)

    elif data == "done":
        await send_shopping_list(update, context, user_id)


async def show_products(update: Update, user_id: int, category: str, query=None):
    products = PRODUCT_CATEGORIES.get(category, [])
    keyboard = [
        [InlineKeyboardButton(f"{'‚úÖ ' if product in selected_products.get(user_id, set()) else ''}{product}",
                              callback_data=f"select_{product}")] for product in products
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"üìå –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: *{category}*\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏:"
    if query:
        await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, parse_mode="Markdown", reply_markup=reply_markup)


async def send_shopping_list(update: Update, context: CallbackContext, user_id: int):
    if not selected_products.get(user_id):
        await update.callback_query.edit_message_text("‚ùå –í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É.")
        return

    sorted_list = {category: [p for p in items if p in selected_products[user_id]]
                   for category, items in PRODUCT_CATEGORIES.items()
                   if any(p in selected_products[user_id] for p in items)}

    message_text = "üõí *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:*\n\n"
    for category, items in sorted_list.items():
        message_text += f"*{category}:*\n"
        message_text += "\n".join(f"‚Ä¢ {product}" for product in items) + "\n\n"

    for family_member in ALLOWED_USERS:
        try:
            await context.bot.send_message(chat_id=family_member, text=message_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {family_member}: {e}")

    await update.callback_query.edit_message_text("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –≤—Å—ñ–º —á–ª–µ–Ω–∞–º —Å—ñ–º'—ó!")
    selected_products[user_id] = set()


async def clear_list(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    selected_products[user_id] = set()
    await update.message.reply_text("üóë –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω–∏–π!")


def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("clear", clear_list))
    app.add_handler(CallbackQueryHandler(button_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
